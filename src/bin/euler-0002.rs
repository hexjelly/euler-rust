/// Each new term in the Fibonacci sequence is generated by adding the previous two terms.
/// By starting with 1 and 2, the first 10 terms will be:
///
/// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
///
/// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

struct Fibonacci {
  current: u64,
  next: u64,
}

impl Iterator for Fibonacci {
  type Item = u64;

  fn next(&mut self) -> Option<u64> {
    let new_next = self.current + self.next;
    self.current = self.next;
    self.next = new_next;

    Some(self.current)
  }
}

fn sum_even_fibonacci(max: u64) -> u64 {
  let fibonacci = Fibonacci {
    current: 1,
    next: 1,
  };

  fibonacci
    .take_while(|n| *n <= max)
    .filter(|n| n % 2 == 0)
    .sum()
}

fn main() {
  println!("{}", sum_even_fibonacci(4_000_000))
}

#[test]
fn euler_0002() {
  assert_eq!(sum_even_fibonacci(4_000_000), 4_613_732);
}
